// Esse fixeiro serve para ligar a base de dados ao back-end

// ImportaÃ§Ã£o das dependÃªncias necessÃ¡rias
const express = require("express"); // Framework web para Node.js - cria o servidor HTTP
const next = require("next"); // Framework React - para renderizaÃ§Ã£o e roteamento
const cors = require("cors"); // Middleware para permitir requisiÃ§Ãµes de diferentes origens
const fs = require("fs"); // Sistema de ficheiros do Node.js - para ler/escrever arquivos

// ConfiguraÃ§Ã£o do Next.js
const dev = process.env.NODE_ENV !== "production"; // Verifica se estÃ¡ em modo desenvolvimento
const nextApp = next({ dev }); // Cria instÃ¢ncia do Next.js
const handle = nextApp.getRequestHandler(); // Handler para processar rotas do Next.js

// CriaÃ§Ã£o da aplicaÃ§Ã£o Express
const app = express();

// ConfiguraÃ§Ã£o dos middlewares
app.use(cors()); // Permite requisiÃ§Ãµes de qualquer origem (frontend pode aceder Ã  API)
app.use(express.json()); // Permite processar JSON no body das requisiÃ§Ãµes POST/PUT

// ===== BASE DE DADOS LOCAL =====
// Ficheiro JSON que funciona como base de dados simples
const DB_FILE = "./db.json";

// FunÃ§Ã£o para ler produtos do ficheiro JSON
function carregarProdutos() {
  if (!fs.existsSync(DB_FILE)) return []; // Se ficheiro nÃ£o existe, retorna array vazio
  const data = JSON.parse(fs.readFileSync(DB_FILE, "utf-8")); // LÃª e converte JSON para objeto
  return data.produtos || []; // Retorna array de produtos ou array vazio
}

// FunÃ§Ã£o para guardar produtos no ficheiro JSON
function guardarProdutos(produtos) {
  const data = { produtos }; // Cria objeto com array de produtos
  fs.writeFileSync(DB_FILE, JSON.stringify(data, null, 2)); // Escreve no ficheiro com formataÃ§Ã£o (2 espaÃ§os)
}

// ===== ROTAS DA API REST =====

// GET /api/produtos - Buscar todos os produtos
app.get("/api/produtos", (req, res) => {
  res.json(carregarProdutos()); // Retorna todos os produtos em formato JSON
});

// GET /api/produtos/:id - Buscar produto especÃ­fico por ID
app.get("/api/produtos/:id", (req, res) => {
  const produtos = carregarProdutos(); // Carrega todos os produtos
  const produto = produtos.find((p) => p.id === parseInt(req.params.id)); // Procura produto pelo ID
  if (!produto) return res.status(404).json({ erro: "Produto nÃ£o encontrado" }); // Se nÃ£o encontrar, retorna erro 404
  res.json(produto); // Retorna o produto encontrado
});

// POST /api/produtos - Criar novo produto
app.post("/api/produtos", (req, res) => {
  const produtos = carregarProdutos(); // Carrega produtos existentes
  const { nome, preco } = req.body; // Extrai dados do body da requisiÃ§Ã£o

  // Cria novo produto com ID auto-incrementado
  const novoProduto = {
    id: produtos.length ? produtos[produtos.length - 1].id + 1 : 1, // ID = Ãºltimo ID + 1, ou 1 se for o primeiro
    nome,
    preco: parseFloat(preco), // Converte string para nÃºmero decimal
  };

  produtos.push(novoProduto); // Adiciona ao array
  guardarProdutos(produtos); // Guarda no ficheiro
  res.status(201).json(novoProduto); // Retorna produto criado com status 201 (Created)
});

// PUT /api/produtos/:id - Atualizar produto existente
app.put("/api/produtos/:id", (req, res) => {
  const produtos = carregarProdutos(); // Carrega todos os produtos
  const index = produtos.findIndex((p) => p.id === parseInt(req.params.id)); // Encontra Ã­ndice do produto
  if (index === -1)
    return res.status(404).json({ erro: "Produto nÃ£o encontrado" }); // Se nÃ£o encontrar, erro 404

  // Atualiza produto mantendo dados originais + dados novos (spread operator)
  produtos[index] = { ...produtos[index], ...req.body };

  guardarProdutos(produtos); // Guarda alteraÃ§Ãµes no ficheiro
  res.json(produtos[index]); // Retorna produto atualizado
});

// DELETE /api/produtos/:id - Eliminar produto
app.delete("/api/produtos/:id", (req, res) => {
  let produtos = carregarProdutos(); // Carrega todos os produtos
  const index = produtos.findIndex((p) => p.id === parseInt(req.params.id)); // Encontra Ã­ndice do produto
  if (index === -1)
    return res.status(404).json({ erro: "Produto nÃ£o encontrado" }); // Se nÃ£o encontrar, erro 404

  produtos.splice(index, 1); // Remove produto do array (splice remove 1 elemento no Ã­ndice)
  guardarProdutos(produtos); // Guarda array atualizado no ficheiro
  res.json({ mensagem: "Produto eliminado com sucesso" }); // Confirma eliminaÃ§Ã£o
});

// ===== INTEGRAÃ‡ÃƒO NEXT.JS + EXPRESS =====

// Middleware que passa todas as rotas nÃ£o-API para o Next.js
// Qualquer rota que nÃ£o seja /api/* serÃ¡ processada pelo Next.js (pÃ¡ginas React)
app.use((req, res) => {
  return handle(req, res); // Next.js processa a rota e renderiza a pÃ¡gina correspondente
});

// ===== INICIALIZAÃ‡ÃƒO DO SERVIDOR =====

const PORT = process.env.PORT || 3000; // Usa porta do ambiente ou 3000 por defeito

// Prepara o Next.js e depois inicia o servidor Express
nextApp.prepare().then(() => {
  app.listen(PORT, () => {
    console.log(
      `ðŸš€ Servidor Next.js + Express a correr em http://localhost:${PORT}`
    );
    console.log(`ðŸ“¡ API disponÃ­vel em http://localhost:${PORT}/api/produtos`);
  });
});
